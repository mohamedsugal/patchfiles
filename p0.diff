diff --git a/init/main.c b/init/main.c
index 02f6b6bd6a17..9dfeec75e0fd 100644
--- a/init/main.c
+++ b/init/main.c
@@ -9,7 +9,7 @@
  *  Simplified starting of init:  Michael A. Griffith <grif@acm.org>
  */
 
-#define DEBUG		/* Enable initcall_debug */
+#define DEBUG /* Enable initcall_debug */
 
 #include <linux/types.h>
 #include <linux/extable.h>
@@ -168,8 +168,15 @@ static int __init set_reset_devices(char *str)
 
 __setup("reset_devices", set_reset_devices);
 
-static const char *argv_init[MAX_INIT_ARGS+2] = { "init", NULL, };
-const char *envp_init[MAX_INIT_ENVS+2] = { "HOME=/", "TERM=linux", NULL, };
+static const char *argv_init[MAX_INIT_ARGS + 2] = {
+	"init",
+	NULL,
+};
+const char *envp_init[MAX_INIT_ENVS + 2] = {
+	"HOME=/",
+	"TERM=linux",
+	NULL,
+};
 static const char *panic_later, *panic_param;
 
 extern const struct obs_kernel_param __setup_start[], __setup_end[];
@@ -207,7 +214,7 @@ static bool __init obsolete_checksetup(char *line)
  * This should be approx 2 Bo*oMips to start (note initial shift), and will
  * still work even if initially too large, it will just take slightly longer
  */
-unsigned long loops_per_jiffy = (1<<12);
+unsigned long loops_per_jiffy = (1 << 12);
 EXPORT_SYMBOL(loops_per_jiffy);
 
 static int __init debug_kernel(char *str)
@@ -245,16 +252,16 @@ static int __init loglevel(char *str)
 early_param("loglevel", loglevel);
 
 /* Change NUL term back to "=", to make "param" the whole string. */
-static int __init repair_env_string(char *param, char *val,
-				    const char *unused, void *arg)
+static int __init repair_env_string(char *param, char *val, const char *unused,
+				    void *arg)
 {
 	if (val) {
 		/* param=val or param="val"? */
-		if (val == param+strlen(param)+1)
+		if (val == param + strlen(param) + 1)
 			val[-1] = '=';
-		else if (val == param+strlen(param)+2) {
+		else if (val == param + strlen(param) + 2) {
 			val[-2] = '=';
-			memmove(val-1, val, strlen(val)+1);
+			memmove(val - 1, val, strlen(val) + 1);
 			val--;
 		} else
 			BUG();
@@ -263,8 +270,8 @@ static int __init repair_env_string(char *param, char *val,
 }
 
 /* Anything after -- gets handed straight to init. */
-static int __init set_init_arg(char *param, char *val,
-			       const char *unused, void *arg)
+static int __init set_init_arg(char *param, char *val, const char *unused,
+			       void *arg)
 {
 	unsigned int i;
 
@@ -288,8 +295,8 @@ static int __init set_init_arg(char *param, char *val,
  * Unknown boot options get handed to init, unless they look like
  * unused parameters (modprobe will find them in /proc/cmdline).
  */
-static int __init unknown_bootoption(char *param, char *val,
-				     const char *unused, void *arg)
+static int __init unknown_bootoption(char *param, char *val, const char *unused,
+				     void *arg)
 {
 	repair_env_string(param, val, unused, NULL);
 
@@ -361,8 +368,12 @@ __setup("rdinit=", rdinit_setup);
 
 #ifndef CONFIG_SMP
 static const unsigned int setup_max_cpus = NR_CPUS;
-static inline void setup_nr_cpu_ids(void) { }
-static inline void smp_prepare_cpus(unsigned int maxcpus) { }
+static inline void setup_nr_cpu_ids(void)
+{
+}
+static inline void smp_prepare_cpus(unsigned int maxcpus)
+{
+}
 #endif
 
 /*
@@ -442,16 +453,15 @@ static noinline void __ref rest_init(void)
 }
 
 /* Check for early params. */
-static int __init do_early_param(char *param, char *val,
-				 const char *unused, void *arg)
+static int __init do_early_param(char *param, char *val, const char *unused,
+				 void *arg)
 {
 	const struct obs_kernel_param *p;
 
 	for (p = __setup_start; p < __setup_end; p++) {
 		if ((p->early && parameq(param, p->str)) ||
 		    (strcmp(param, "console") == 0 &&
-		     strcmp(p->str, "earlycon") == 0)
-		) {
+		     strcmp(p->str, "earlycon") == 0)) {
 			if (p->setup_func(val) != 0)
 				pr_warn("Malformed early option '%s'\n", param);
 		}
@@ -481,19 +491,23 @@ void __init parse_early_param(void)
 	done = 1;
 }
 
-void __init __weak arch_post_acpi_subsys_init(void) { }
+void __init __weak arch_post_acpi_subsys_init(void)
+{
+}
 
 void __init __weak smp_setup_processor_id(void)
 {
 }
 
-# if THREAD_SIZE >= PAGE_SIZE
+#if THREAD_SIZE >= PAGE_SIZE
 void __init __weak thread_stack_cache_init(void)
 {
 }
 #endif
 
-void __init __weak mem_encrypt_init(void) { }
+void __init __weak mem_encrypt_init(void)
+{
+}
 
 bool initcall_debug;
 core_param(initcall_debug, initcall_debug, bool, 0644);
@@ -522,8 +536,8 @@ static void __init report_meminit(void)
 	else
 		stack = "off";
 
-	pr_info("mem auto-init: stack:%s, heap alloc:%s, heap free:%s\n",
-		stack, want_init_on_alloc(GFP_KERNEL) ? "on" : "off",
+	pr_info("mem auto-init: stack:%s, heap alloc:%s, heap free:%s\n", stack,
+		want_init_on_alloc(GFP_KERNEL) ? "on" : "off",
 		want_init_on_free() ? "on" : "off");
 	if (want_init_on_free())
 		pr_info("mem auto-init: clearing system memory may take some time...\n");
@@ -577,7 +591,7 @@ asmlinkage __visible void __init start_kernel(void)
 	setup_command_line(command_line);
 	setup_nr_cpu_ids();
 	setup_per_cpu_areas();
-	smp_prepare_boot_cpu();	/* arch-specific boot-cpu hooks */
+	smp_prepare_boot_cpu(); /* arch-specific boot-cpu hooks */
 	boot_cpu_hotplug_init();
 
 	build_all_zonelists(NULL);
@@ -587,10 +601,10 @@ asmlinkage __visible void __init start_kernel(void)
 	/* parameters may set static keys */
 	jump_label_init();
 	parse_early_param();
-	after_dashes = parse_args("Booting kernel",
-				  static_command_line, __start___param,
-				  __stop___param - __start___param,
-				  -1, -1, NULL, &unknown_bootoption);
+	after_dashes =
+		parse_args("Booting kernel", static_command_line,
+			   __start___param, __stop___param - __start___param,
+			   -1, -1, NULL, &unknown_bootoption);
 	if (!IS_ERR_OR_NULL(after_dashes))
 		parse_args("Setting init args", after_dashes, NULL, 0, -1, -1,
 			   NULL, set_init_arg);
@@ -714,8 +728,8 @@ asmlinkage __visible void __init start_kernel(void)
 	if (initrd_start && !initrd_below_start_ok &&
 	    page_to_pfn(virt_to_page((void *)initrd_start)) < min_low_pfn) {
 		pr_crit("initrd overwritten (0x%08lx < 0x%08lx) - disabling it.\n",
-		    page_to_pfn(virt_to_page((void *)initrd_start)),
-		    min_low_pfn);
+			page_to_pfn(virt_to_page((void *)initrd_start)),
+			min_low_pfn);
 		initrd_start = 0;
 	}
 #endif
@@ -775,9 +789,9 @@ asmlinkage __visible void __init start_kernel(void)
 static void __init do_ctors(void)
 {
 #ifdef CONFIG_CONSTRUCTORS
-	ctor_fn_t *fn = (ctor_fn_t *) __ctors_start;
+	ctor_fn_t *fn = (ctor_fn_t *)__ctors_start;
 
-	for (; fn < (ctor_fn_t *) __ctors_end; fn++)
+	for (; fn < (ctor_fn_t *)__ctors_end; fn++)
 		(*fn)();
 #endif
 }
@@ -819,7 +833,7 @@ static bool __init_or_module initcall_blacklisted(initcall_t fn)
 	if (list_empty(&blacklisted_initcalls))
 		return false;
 
-	addr = (unsigned long) dereference_function_descriptor(fn);
+	addr = (unsigned long)dereference_function_descriptor(fn);
 	sprint_symbol_no_offset(fn_name, addr);
 
 	/*
@@ -828,7 +842,7 @@ static bool __init_or_module initcall_blacklisted(initcall_t fn)
 	 */
 	strreplace(fn_name, ' ', '\0');
 
-	list_for_each_entry(entry, &blacklisted_initcalls, next) {
+	list_for_each_entry (entry, &blacklisted_initcalls, next) {
 		if (!strcmp(fn_name, entry->buf)) {
 			pr_debug("initcall %s blacklisted\n", fn_name);
 			return true;
@@ -851,8 +865,7 @@ static bool __init_or_module initcall_blacklisted(initcall_t fn)
 #endif
 __setup("initcall_blacklist=", initcall_blacklist);
 
-static __init_or_module void
-trace_initcall_start_cb(void *data, initcall_t fn)
+static __init_or_module void trace_initcall_start_cb(void *data, initcall_t fn)
 {
 	ktime_t *calltime = (ktime_t *)data;
 
@@ -860,8 +873,8 @@ trace_initcall_start_cb(void *data, initcall_t fn)
 	*calltime = ktime_get();
 }
 
-static __init_or_module void
-trace_initcall_finish_cb(void *data, initcall_t fn, int ret)
+static __init_or_module void trace_initcall_finish_cb(void *data, initcall_t fn,
+						      int ret)
 {
 	ktime_t *calltime = (ktime_t *)data;
 	ktime_t delta, rettime;
@@ -869,9 +882,9 @@ trace_initcall_finish_cb(void *data, initcall_t fn, int ret)
 
 	rettime = ktime_get();
 	delta = ktime_sub(rettime, *calltime);
-	duration = (unsigned long long) ktime_to_ns(delta) >> 10;
-	printk(KERN_DEBUG "initcall %pF returned %d after %lld usecs\n",
-		 fn, ret, duration);
+	duration = (unsigned long long)ktime_to_ns(delta) >> 10;
+	printk(KERN_DEBUG "initcall %pF returned %d after %lld usecs\n", fn,
+	       ret, duration);
 }
 
 static ktime_t initcall_calltime;
@@ -887,8 +900,8 @@ static void __init initcall_debug_enable(void)
 					      &initcall_calltime);
 	WARN(ret, "Failed to register initcall tracepoints\n");
 }
-# define do_trace_initcall_start	trace_initcall_start
-# define do_trace_initcall_finish	trace_initcall_finish
+#define do_trace_initcall_start trace_initcall_start
+#define do_trace_initcall_finish trace_initcall_finish
 #else
 static inline void do_trace_initcall_start(initcall_t fn)
 {
@@ -933,7 +946,6 @@ int __init_or_module do_one_initcall(initcall_t fn)
 	return ret;
 }
 
-
 extern initcall_entry_t __initcall_start[];
 extern initcall_entry_t __initcall0_start[];
 extern initcall_entry_t __initcall1_start[];
@@ -946,27 +958,14 @@ extern initcall_entry_t __initcall7_start[];
 extern initcall_entry_t __initcall_end[];
 
 static initcall_entry_t *initcall_levels[] __initdata = {
-	__initcall0_start,
-	__initcall1_start,
-	__initcall2_start,
-	__initcall3_start,
-	__initcall4_start,
-	__initcall5_start,
-	__initcall6_start,
-	__initcall7_start,
-	__initcall_end,
+	__initcall0_start, __initcall1_start, __initcall2_start,
+	__initcall3_start, __initcall4_start, __initcall5_start,
+	__initcall6_start, __initcall7_start, __initcall_end,
 };
 
 /* Keep these in sync with initcalls in include/linux/init.h */
 static char *initcall_level_names[] __initdata = {
-	"pure",
-	"core",
-	"postcore",
-	"arch",
-	"subsys",
-	"fs",
-	"device",
-	"late",
+	"pure", "core", "postcore", "arch", "subsys", "fs", "device", "late",
 };
 
 static void __init do_initcall_level(int level)
@@ -974,14 +973,12 @@ static void __init do_initcall_level(int level)
 	initcall_entry_t *fn;
 
 	strcpy(initcall_command_line, saved_command_line);
-	parse_args(initcall_level_names[level],
-		   initcall_command_line, __start___param,
-		   __stop___param - __start___param,
-		   level, level,
-		   NULL, &repair_env_string);
+	parse_args(initcall_level_names[level], initcall_command_line,
+		   __start___param, __stop___param - __start___param, level,
+		   level, NULL, &repair_env_string);
 
 	trace_initcall_level(initcall_level_names[level]);
-	for (fn = initcall_levels[level]; fn < initcall_levels[level+1]; fn++)
+	for (fn = initcall_levels[level]; fn < initcall_levels[level + 1]; fn++)
 		do_one_initcall(initcall_from_entry(fn));
 }
 
@@ -1036,8 +1033,8 @@ static int run_init_process(const char *init_filename)
 	argv_init[0] = init_filename;
 	pr_info("Run %s as init process\n", init_filename);
 	return do_execve(getname_kernel(init_filename),
-		(const char __user *const __user *)argv_init,
-		(const char __user *const __user *)envp_init);
+			 (const char __user *const __user *)argv_init,
+			 (const char __user *const __user *)envp_init);
 }
 
 static int try_to_run_init_process(const char *init_filename)
@@ -1109,6 +1106,9 @@ static int __ref kernel_init(void *unused)
 	system_state = SYSTEM_RUNNING;
 	numa_default_policy();
 
+	printk(KERN_ERR
+	       "##### Mohamed Mohamed (UFID: 7403-7273) Talk is Cheap, Show Me the Code! #####");
+
 	rcu_end_inkernel_boot();
 
 	if (ramdisk_execute_command) {
@@ -1129,8 +1129,8 @@ static int __ref kernel_init(void *unused)
 		ret = run_init_process(execute_command);
 		if (!ret)
 			return 0;
-		panic("Requested init %s failed (error %d).",
-		      execute_command, ret);
+		panic("Requested init %s failed (error %d).", execute_command,
+		      ret);
 	}
 	if (!try_to_run_init_process("/sbin/init") ||
 	    !try_to_run_init_process("/etc/init") ||
@@ -1178,11 +1178,11 @@ static noinline void __init kernel_init_freeable(void)
 	do_basic_setup();
 
 	/* Open the /dev/console on the rootfs, this should never fail */
-	if (ksys_open((const char __user *) "/dev/console", O_RDWR, 0) < 0)
+	if (ksys_open((const char __user *)"/dev/console", O_RDWR, 0) < 0)
 		pr_err("Warning: unable to open an initial console.\n");
 
-	(void) ksys_dup(0);
-	(void) ksys_dup(0);
+	(void)ksys_dup(0);
+	(void)ksys_dup(0);
 	/*
 	 * check if there is an early userspace init.  If yes, let it do all
 	 * the work
@@ -1191,8 +1191,7 @@ static noinline void __init kernel_init_freeable(void)
 	if (!ramdisk_execute_command)
 		ramdisk_execute_command = "/init";
 
-	if (ksys_access((const char __user *)
-			ramdisk_execute_command, 0) != 0) {
+	if (ksys_access((const char __user *)ramdisk_execute_command, 0) != 0) {
 		ramdisk_execute_command = NULL;
 		prepare_namespace();
 	}
